<?php 

/**
 * 
 * =======================================================================
 * 
 * Script to export reading list author affiliation data to TXT or CSV files  
 * for Library staff to do further processing   
 * 
 * Output files have a row-per-author-information 
 * (compare with simpleExport.php which outputs a row-per-citation) 
 * 
 * =======================================================================
 * 
 * Input: 
 * JSON-encoded list of citations on STDIN 
 * 
 * Output: 
 * Tab-delim-TXT- or CSV-format files - one file per reading list 
 * 
 * =======================================================================
 *
 * Typical usage: 
 * 
 * e.g. 
 * php longExport.php <Data\PSYC3505_ASWV.json 
 * Writes a file-per-reading-list from the input citations file   
 *
 *  
 * 
 * Unlike other scripts this does not write to STDOUT but instead to a set of files 
 * with names defined by the function outFilename($record) 
 * 
 * The input citation data is assumed to already contain data from Leganto, Alma, Scopus and VIAF  
 * 
 * See getCitationsByModule.php, enhanceCitationsFromAlma.php 
 * enhanceCitationsFrom Scopus.php and enhanceCitationsFromViaf.php for how this data is prepared  
 * 
 * The script also assumes a World Bank ranking file is present which has been generated by 
 * makeWorldBankRankings.php  
 * 
 * 
 * =======================================================================
 * 
 * General process: 
 * 
 * Make an empty result set to populate 
 * 
 * Loop over citations - for each citation:  
 *  - Assemble the relevant data from the different sources
 *  - Calculate a numeric CSI for the citation
 *  - Add the resulting record to the result set   
 *    
 * Export the result set as TXT or CSV 
 * 
 * =======================================================================
 * 
 * 
 * 
 * !! Gotchas !!  
 * 
 * The output file is (like all the other data in this project) UTF-8-encoded
 * But Excel expects ANSI-encoded CSV files and will not open files as UTF-8 
 * So special characters hash in Excel if using CSV 
 * For this reason, we're for now exporting as TXT (see $outFormat)   
 * 
 * Different sources variously use ISO-2-letter country codes, ISO-3-letter country codes and country names 
 * During the earlier stages of the process (enhanceCitations...) we simply take the data exactly as provided 
 * During this CSV-export process we have to convert everything to a single standard format 
 * Currently we are using ISO-2-letter codes but this could change 
 * For conversion we use JSON mapping tables downloaded from http://country.io/data/ and saved in Config/CountryCodes 
 * Some sources have some records with error or placeholder codes (e.g. "XX") and some have free-text country names in 
 * other languages - currently we ignore anything we cannot recognise  
 * TODO: For a production service we may want to build config data with e.g. translations of country names from other languages
 * 
 * Some affiliation data does not contain country codes or names e.g. the 5xx fields in VIAF might contain a city or an institution 
 * We currently are not using it but 
 * TODO: in a production system we might want to look at whether we can lookup institutions and find their countries 
 *    
 *    
 * 
 * 
 * 
 */


error_reporting(E_ALL);                     // we want to know about all problems


require_once("utils.php"); 


$inclusionThreshold = 80; // author-title similarity threshold 




$outFormat = "TXT"; // TXT | CSV 
function outFilename($record) { return $record["LIST-CODE"]."_LONG"; };  
$outFolder = "Data/"; 


// country codes
$iso3Map = json_decode(file_get_contents("Config/CountryCodes/iso3.json"), TRUE);               // 2-letter codes -> 3-letter codes
$namesMap = json_decode(file_get_contents("Config/CountryCodes/names.json"), TRUE);             // 2-letter codes -> Names
$continentMap = json_decode(file_get_contents("Config/CountryCodes/continent.json"), TRUE);     // 2-letter country -> 2-letter continent
$iso2Map = array_flip($iso3Map);                                                                // 3-letter codes -> 2-letter codes
$namesToCodesMap = array_change_key_case(array_flip($namesMap));                                // Names -> 2-letter codes

$countryNameAlias = json_decode(file_get_contents("Config/CountryCodes/nameAlias.json"), TRUE);      // e.g. "England" to "United Kingdom"
foreach ($countryNameAlias as $countryNameSource=>$countryNameTarget) {
    $countryNameAlias[strtolower($countryNameSource)] = $countryNameTarget; // to cater for capitalisation inconsistencies, keep a copy in all lower case
}


// World Bank rankings
$worldBankRank = Array();
$worldBankRankLines = file($config["World Bank"]["RankFile"], FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
$columnNames = explode("\t", array_shift($worldBankRankLines));
foreach ($worldBankRankLines as $worldBankRankLine) {
    $entry = explode("\t", $worldBankRankLine);
    $entry = array_combine($columnNames, $entry); // turn numeric column indices to column header names
    if (isset($entry["Country Code [2]"]) && $entry["Country Code [2]"]) {
        $worldBankRank[$entry["Country Code [2]"]] = $entry["Rank"];
    }
}
// World Bank country code aliases
$worldBankAlias = json_decode(file_get_contents("Config/WorldBank/alias.json"), TRUE);
foreach ($worldBankAlias as $source=>$target) {
    if (!isset($worldBankRank[$source])) {      // only alias if we really don't have it
        if ($target===FALSE) {
            $worldBankRank[$source] = FALSE;    // special case - FALSE in alias file means we know we don't have it, so don't want an error message
        } else {
            $worldBankRank[$source] = $worldBankRank[$target];
        }
    }
}

$citations = json_decode(file_get_contents("php://stdin"), TRUE);

$outputRecords = Array(); 
$rowHeadings = Array("CIT-TYPE", "CIT-TAGS", "CIT-TITLE", "CIT-CONTAINER", "CIT-AUTHOR", "SIMILARITY", "SOURCE", "SOURCE-AUTHORS", "SOURCE-LOCATION", "SOURCE-LOCATION-TYPE");

foreach ($citations as $citation) {
    
    if (!isset($citation["Leganto"])) {
        
        if (isset($citation["Course"]["course_code"]) && $citation["Course"]["course_code"]) {
            trigger_error("Error: Course ".$citation["Course"]["course_code"]." has no reading list in Leganto", E_USER_ERROR);
            exit;
        } else {
            trigger_error("Error: Module code ".$citation["Course"]["modcode"]." does not correspond to a course in Alma", E_USER_ERROR);
            exit;
        }
        
    } else {
        
        if ($citation["Leganto"]["secondary_type"]["value"]!="NOTE") {
            // only do any enhancement for entries in the citations file that have an actual list
            // and which are not notes
            
            $outputRecordBase = Array();    // base information used by all lines
            $outputRecordBaseEmpty = Array();
            if (isset($citation["Leganto"]["metadata"]["title"])) {
                $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["title"];
                $outputRecordBaseEmpty["CIT-TITLE"] = "";
            } else if (isset($citation["Leganto"]["metadata"]["journal_title"])) {
                $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["journal_title"];
                $outputRecordBaseEmpty["CIT-TITLE"] = "";
            }
            if (isset($citation["Leganto"]["metadata"]["article_title"])) {
                if (isset($outputRecordBase["CIT-TITLE"])) {
                    $outputRecordBase["CIT-CONTAINER"] = $outputRecordBase["CIT-TITLE"];
                    $outputRecordBaseEmpty["CIT-CONTAINER"] = "";
                }
                $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["article_title"];
                $outputRecordBaseEmpty["CIT-TITLE"] = "";
            } else if (isset($citation["Leganto"]["metadata"]["chapter_title"])) {
                if (isset($outputRecordBase["CIT-TITLE"])) {
                    $outputRecordBase["CIT-CONTAINER"] = $outputRecordBase["CIT-TITLE"];
                    $outputRecordBaseEmpty["CIT-CONTAINER"] = "";
                }
                $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["chapter_title"];
                $outputRecordBaseEmpty["CIT-TITLE"] = "";
            }
            if (isset($citation["Leganto"]["metadata"]["author"])) {
                $outputRecordBase["CIT-AUTHOR"] = $citation["Leganto"]["metadata"]["author"];
                $outputRecordBaseEmpty["CIT-AUTHOR"] = "";
            }
            if (isset($citation["Leganto"]["secondary_type"])) {
                $outputRecord["CIT-TYPE"] = $citation["Leganto"]["secondary_type"]["desc"];
            }
            $outputRecordBase["CIT-TAGS"] = Array();
            $outputRecordBaseEmpty["CIT-TAGS"] = Array();
            if (isset($citation["Leganto"]["section_tags"])) {
                foreach ($citation["Leganto"]["section_tags"] as $tag) {
                    $outputRecordBase["CIT-TAGS"][] = $tag["desc"];
                }
            }
            if (isset($citation["Leganto"]["citation_tags"])) {
                foreach ($citation["Leganto"]["citation_tags"] as $tag) {
                    $outputRecordBase["CIT-TAGS"][] = $tag["desc"];
                }
            }
            
            $foundAlmaCitTitle = FALSE;
            if (
                $citation["Leganto"]["secondary_type"]["value"]=="BK" &&
                isset($citation["Alma"]) &&
                isset($citation["Alma"]["titles"]) &&
                count($citation["Alma"]["titles"])
                ) {
                    foreach ($citation["Alma"]["titles"] as $almaTitle) {
                        if ($almaTitle["tag"]=="245" && $almaTitle["collated"]) {
                            $outputRecordBase["CIT-TITLE"] = $almaTitle["collated"];
                            $foundAlmaCitTitle = TRUE;
                            break; // stop at the first one
                        }
                    }
                }
                
                if (!$foundAlmaCitTitle) {
                    if (isset($citation["Leganto"]["metadata"]["title"])) {
                        $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["title"];
                    } else if (isset($citation["Leganto"]["metadata"]["journal_title"])) {
                        $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["journal_title"];
                    }
                }
                
                if (isset($citation["Leganto"]["metadata"]["article_title"])) {
                    if (isset($outputRecordBase["CIT-TITLE"])) { $outputRecordBase["CIT-CONTAINER"] = $outputRecordBase["CIT-TITLE"]; }
                    $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["article_title"];
                } else if (isset($citation["Leganto"]["metadata"]["chapter_title"])) {
                    if (isset($outputRecordBase["CIT-TITLE"])) { $outputRecordBase["CIT-CONTAINER"] = $outputRecordBase["CIT-TITLE"]; }
                    $outputRecordBase["CIT-TITLE"] = $citation["Leganto"]["metadata"]["chapter_title"];
                }
                
                if (
                    $citation["Leganto"]["secondary_type"]["value"]=="BK" &&
                    isset($citation["Alma"]) &&
                    isset($citation["Alma"]["creators"]) &&
                    count($citation["Alma"]["creators"])
                    ) {
                        $outputRecordBase["CIT-AUTHOR"] = array_map(function($a) { return $a["collated"]; }, $citation["Alma"]["creators"]);
                    } else if (isset($citation["Leganto"]["metadata"]["author"])) {
                        $outputRecordBase["CIT-AUTHOR"] = $citation["Leganto"]["metadata"]["author"];
                    }
                    
                    $sources = Array();
                    
                    $generatedHeadEntry = FALSE;
                    
                    if (isset($citation["Scopus"])) {
                        
                        //TODO allow a "force" option to bypass errors
                        if (isset($citation["Scopus"]["errors"])) {
                            trigger_error("Error from Scopus integration: ".print_r($citation["Scopus"]["errors"], TRUE), E_USER_ERROR);
                            exit;
                        }
                        
                        if (isset($citation["Scopus"]["first-match"]) && isset($citation["Scopus"]["first-match"]["authors"])) {
                            
                            foreach ($citation["Scopus"]["first-match"]["authors"] as $author) {
                                
                                if (!$generatedHeadEntry) {
                                    $outputRecord = $outputRecordBase; // we'll assemble author-instance line here
                                } else {
                                    $outputRecord = $outputRecordBaseEmpty; // we'll assemble author-instance line here
                                }
                                $generatedHeadEntry = TRUE;

                                $outputRecord["SOURCE"] = "SCOPUS";

                                if (isset($author["similarity-title"]) && isset($author["similarity-author"])) {
                                    $outputRecord["SIMILARITY"] = floor($author["similarity-title"]*$author["similarity-author"]/100);
                                }
                                
                                $outputRecord["CIT-AUTHOR"] = $author["ce:indexed-name"];
                                
                                if (isset($author["affiliation"]) && is_array($author["affiliation"])) {
                                    foreach ($author["affiliation"] as $authorAffiliation) {
                                        $outputRecord["SOURCE-LOCATION-TYPE"] = "Contemporary affiliation";
                                        $outputRecord["SOURCE-LOCATION"] = Array();
                                        if (isset($authorAffiliation["affiliation-name"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["affiliation-name"];
                                        }
                                        if (isset($authorAffiliation["address"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["address"];
                                        }
                                        if (isset($authorAffiliation["city"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["city"];
                                        }
                                        if (isset($authorAffiliation["country"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["country"];
                                        }
                                        $outputRecords[] = $outputRecord;
                                        $outputRecord = $outputRecordBaseEmpty; // start a new one 
                                    }
                                }
                                
                                // current affiliation
                                if (isset($author["affiliation-current"]) && is_array($author["affiliation-current"])) {
                                    foreach ($author["affiliation-current"] as $authorAffiliation) {
                                        $outputRecord["SOURCE-LOCATION-TYPE"] = "Current affiliation";
                                        $outputRecord["SOURCE-LOCATION"] = Array();
                                        if (isset($authorAffiliation["sort-name"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["sort-name"];
                                        }
                                        if (isset($authorAffiliation["address"]) && $authorAffiliation["address"] && isset($authorAffiliation["address"]["address-part"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["address"]["address-part"];
                                        }
                                        if (isset($authorAffiliation["address"]) && $authorAffiliation["address"] && isset($authorAffiliation["address"]["city"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["address"]["city"];
                                        }
                                        if (isset($authorAffiliation["address"]) && $authorAffiliation["address"] && isset($authorAffiliation["address"]["state"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["address"]["state"];
                                        }
                                        if (isset($authorAffiliation["address"]) && $authorAffiliation["address"] && isset($authorAffiliation["address"]["country"])) {
                                            $outputRecord["SOURCE-LOCATION"][] = $authorAffiliation["address"]["country"];
                                        }
                                        $outputRecords[] = $outputRecord;
                                        $outputRecord = $outputRecordBaseEmpty; // start a new one
                                    }
                                }
                                
                            }
                            
                        }
                    }
                    
                    
                    
                    
                    if (isset($citation["WoS"])) {
                        
                        //TODO allow a "force" option to bypass errors
                        if (isset($citation["WoS"]["errors"])) {
                            trigger_error("Error from WoS integration: ".print_r($citation["WoS"]["errors"], TRUE), E_USER_ERROR);
                            exit;
                        }
                        
                        $seenAddresses = Array(); 
                        
                        if (isset($citation["WoS"]["first-match"]) && isset($citation["WoS"]["first-match"]["metadata"]) && isset($citation["WoS"]["first-match"]["metadata"]["authors"])) {
                            
                            foreach ($citation["WoS"]["first-match"]["metadata"]["authors"] as $author) {
                                
                                if (!$generatedHeadEntry) {
                                    $outputRecord = $outputRecordBase; // we'll assemble author-instance line here
                                } else {
                                    $outputRecord = $outputRecordBaseEmpty; // we'll assemble author-instance line here
                                }
                                $generatedHeadEntry = TRUE;
                                
                                $outputRecord["SOURCE"] = "WOS";
                                
                                if (isset($author["similarity-title"]) && isset($author["similarity-author"])) {
                                    $outputRecord["SIMILARITY"] = floor($author["similarity-title"]*$author["similarity-author"]/100);
                                }
                                
                                $outputRecord["CIT-AUTHOR"] = $author["display_name"];
                                
                                if (isset($author["addr_no"]) && $author["addr_no"]) {
                                    $seenAddresses[$author["addr_no"]] = TRUE;
                                }
                                
                                if (isset($author["addresses"]) && $author["addresses"]) {
                                    foreach ($author["addresses"] as $address) {
                                        $outputRecord["SOURCE-LOCATION-TYPE"] = "Author address";
                                        if (isset($address["full_address"])) {
                                            $outputRecord["SOURCE-LOCATION"] = $address["full_address"];
                                        }
                                        $outputRecords[] = $outputRecord;
                                        $outputRecord = $outputRecordBaseEmpty; // start a new one
                                    }
                                }
                            }
                            
                            // floating addresses
                            if (isset($citation["WoS"]["first-match"]["metadata"]["addresses"]) && $citation["WoS"]["first-match"]["metadata"]["addresses"]) {
                                foreach ($citation["WoS"]["first-match"]["metadata"]["addresses"] as $address) {
                                    if (isset($address["address_spec"])) { 
                                        if (!$seenAddresses[$address["address_spec"]["addr_no"]]) {
                                            $outputRecord["SOURCE-LOCATION-TYPE"] = "Unassigned address";
                                            if (isset($address["address_spec"]["full_address"])) {
                                                $outputRecord["SOURCE-LOCATION"] = $address["full_address"];
                                            }
                                            $outputRecords[] = $outputRecord;
                                            $outputRecord = $outputRecordBaseEmpty; // start a new one
                                            
                                        }
                                    }
                                    
                                }
                            }
                            // reprint addresses
                            if (isset($citation["WoS"]["first-match"]["metadata"]["reprint_addresses"]) && $citation["WoS"]["first-match"]["metadata"]["reprint_addresses"]) {
                                foreach ($citation["WoS"]["first-match"]["metadata"]["reprint_addresses"] as $address) {
                                    
                                    $outputRecord["SOURCE-LOCATION-TYPE"] = "Reprint address";
                                    if (isset($address["address_spec"]["full_address"])) {
                                        $outputRecord["SOURCE-LOCATION"] = $address["full_address"];
                                    }
                                    $outputRecords[] = $outputRecord;
                                    $outputRecord = $outputRecordBaseEmpty; // start a new one
                                    
                                    
                                }
                            }
                            
                        }
                        
                    }
                    
                    
                    
                    
                    if (isset($citation["VIAF"])) {
                        
                        //TODO allow a "force" option to bypass errors
                        if (isset($citation["VIAF"]["errors"])) {
                            trigger_error("Error from VIAF integration: ".print_r($citation["VIAF"]["errors"], TRUE), E_USER_ERROR);
                            exit;
                        }
                        

                        
                        foreach ($citation["VIAF"] as $viafCitation) {

                            
                            if (isset($viafCitation["best-match"])) {
                                
                                
                                if (!$generatedHeadEntry) {
                                    $outputRecord = $outputRecordBase; // we'll assemble author-instance line here
                                } else {
                                    $outputRecord = $outputRecordBaseEmpty; // we'll assemble author-instance line here
                                }
                                $generatedHeadEntry = TRUE;
                                
                                $outputRecord["SOURCE"] = "VIAF";
                                
                                
                                $outputRecord["SIMILARITY"] = floor($viafCitation["best-match"]["similarity-title"]*$viafCitation["best-match"]["similarity-author"]/100);
                                
                                $outputRecord["CIT-AUTHOR"] = $viafCitation["best-match"]["heading"];
                                
                                foreach (Array("nationalities", "countriesOfPublication", "locations", "affiliations") as $loctype) {
                                    if (isset($viafCitation["best-match"][$loctype]) && is_array($viafCitation["best-match"][$loctype])) {
                                        $outputRecord["SOURCE-LOCATION-TYPE"] = $loctype;
                                        $outputRecord["SOURCE-LOCATION"] = Array();
                                        foreach ($viafCitation["best-match"][$loctype] as $location) {
                                            $outputRecord["SOURCE-LOCATION"][] = $location["value"];
                                        }
                                        $outputRecords[] = $outputRecord;
                                        $outputRecord = $outputRecordBaseEmpty; // start a new one
                                    }
                                }
                                
                            }
                            
                            
                        }
                        
                        
                    }
                    
                    
        }
        
    }
    
}



$lastFilename = FALSE;  // once we hit the first record we'll set this 
$out = NULL;            // will be a CSV file handle 


foreach ($outputRecords as $outputRecord) {
    
    $thisFilename = outFilename($outputRecord);
    if ($thisFilename!==$lastFilename) {
        
        // start a new file
        
        // first, close off any existing ones
        if ($outFormat == "CSV" && $out!==NULL) {
            fclose($out);
            $out = NULL;
        }
        
        // now open a new file
        if ($outFormat == "CSV") {
            $out = fopen($outFolder.$thisFilename.".".$outFormat, 'w');
        }
        
        // now output the header
        // add country codes to header row
        $thisRowHeadings = $rowHeadings;
        arsort($countryCodeCounts[$thisFilename]);
        foreach ($countryCodeCounts[$thisFilename] as $countryCode=>$countryCount) {
            $thisRowHeadings[] = $countryCode;
        }
        if ($outFormat == "CSV") {
            fputcsv($out, $thisRowHeadings);
        } else if ($outFormat == "TXT") {
            file_put_contents($outFolder.$thisFilename.".".$outFormat, implode("\t", $thisRowHeadings)."\n");
        }
        
        // OK remember this filename for future rows
        $lastFilename = $thisFilename;
        
    }
    
    $outputRow = Array();
    
    $thisRowHeadings = $rowHeadings;
    arsort($countryCodeCounts[$thisFilename]);
    foreach ($countryCodeCounts[$thisFilename] as $countryCode=>$countryCount) {
        $thisRowHeadings[] = $countryCode;
    }
    
    foreach ($thisRowHeadings as $rowHeading) {
        $outputField = FALSE;
        if (!isset($outputRecord[$rowHeading])) {
            $outputField = "";
        } else if (is_array($outputRecord[$rowHeading])) {          // for arrays we will delimit with ,
            $outputFieldParts = Array();
            foreach ($outputRecord[$rowHeading] as $fieldPart) {
                if (is_array($fieldPart)) {                          // for sub-arrays we will delimit with ,
                    $outputFieldParts[] = implode(";", $fieldPart);
                } else {
                    $outputFieldParts[] = $fieldPart;
                }
            }
            $outputField = implode(",", $outputFieldParts);
        } else {
            $outputField = $outputRecord[$rowHeading];
        }
        $outputRow[] = $outputField;
    }
    if ($outFormat == "CSV") {
        fputcsv($out, $outputRow);
    } else if ($outFormat == "TXT") {
        file_put_contents($outFolder.$thisFilename.".".$outFormat, implode("\t", $outputRow)."\n", FILE_APPEND);
    }
    
}

// finally, close off any existing ones
if ($outFormat == "CSV" && $out!==NULL) {
    fclose($out);
    $out = NULL;
}







?>