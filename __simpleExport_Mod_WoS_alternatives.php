<?php 

/**
 * 
 * =======================================================================
 * 
 * Script to export reading list author affiliation data to a TXT or CSV file 
 * for Library staff to do further processing   
 * 
 * =======================================================================
 * 
 * Input: 
 * JSON-encoded list of citations on STDIN 
 * 
 * Output: 
 * Tab-delim-TXT- or CSV-format table of citations with affiliation data 
 * 
 * =======================================================================
 *
 * Typical usage: 
 * php simpleExport.php <Data/4.json >Data/5.txt 
 * 
 * The input citation data is assumed to already contain data from Leganto, Alma, Scopus and VIAF  
 * 
 * See getCitationsByModule.php, enhanceCitationsFromAlma.php 
 * enhanceCitationsFrom Scopus.php and enhanceCitationsFromViaf.php for how this data is prepared  
 * 
 * The script also assumes a World Bank ranking file is present which has been generated by 
 * makeWorldBankRankings.php  
 * 
 * 
 * =======================================================================
 * 
 * General process: 
 * 
 * Make an empty result set to popuplate 
 * 
 * Loop over citations - for each citation:  
 *  - Assemble the relevant data from the different sources
 *  - Calculate a numeric CSI for the citation
 *  - Add the resulting record to the result set   
 *    
 * Export the result set as TXT or CSV 
 * 
 * =======================================================================
 * 
 * 
 * 
 * !! Gotchas !!  
 * 
 * The output file is (like all the other data in this project) UTF-8-encoded
 * But Excel expects ANSI-encoded CSV files and will not open files as UTF-8 
 * So special characters hash in Excel if using CSV 
 * For this reason, we're for now exporting as TXT (see $outFormat)   
 * 
 * Different sources variously use ISO-2-letter country codes, ISO-3-letter country codes and country names 
 * During the earlier stages of the process (enhanceCitations...) we simply take the data exactly as provided 
 * During this CSV-export process we have to convert everything to a single standard format 
 * Currently we are using ISO-2-letter codes but this could change 
 * For conversion we use JSON mapping tables downloaded from http://country.io/data/ and saved in Config/CountryCodes 
 * Some sources have some records with error or placeholder codes (e.g. "XX") and some have free-text country names in 
 * other languages - currently we ignore anything we cannot recognise  
 * TODO: For a production service we may want to build config data with e.g. translations of country names from other languages
 * 
 * Some affiliation data does not contain country codes or names e.g. the 5xx fields in VIAF might contain a city or an institution 
 * We currently are not using it but 
 * TODO: in a production system we might want to look at whether we can lookup institutions and find their countries 
 *    
 *    
 * 
 * 
 * 
 */


error_reporting(E_ALL);                     // we want to know about all problems


require_once("utils.php"); 


$outFormat = "TXT"; // TXT | CSV 

// country codes 
$iso3Map = json_decode(file_get_contents("Config/CountryCodes/iso3.json"), TRUE);               // 2-letter codes -> 3-letter codes 
$namesMap = json_decode(file_get_contents("Config/CountryCodes/names.json"), TRUE);             // 2-letter codes -> Names 
$continentMap = json_decode(file_get_contents("Config/CountryCodes/continent.json"), TRUE);     // 2-letter country -> 2-letter continent
$iso2Map = array_flip($iso3Map);                                                                // 3-letter codes -> 2-letter codes 
$namesToCodesMap = array_change_key_case(array_flip($namesMap));                                // Names -> 2-letter codes 

$countryNameAlias = json_decode(file_get_contents("Config/CountryCodes/nameAlias.json"), TRUE);      // e.g. "England" to "United Kingdom"
foreach ($countryNameAlias as $countryNameSource=>$countryNameTarget) { 
    $countryNameAlias[strtolower($countryNameSource)] = $countryNameTarget; // to cater for capitalisation inconsistencies, keep a copy in all lower case 
}

// World Bank rankings 
$worldBankRank = Array(); 
$worldBankRankLines = file($config["World Bank"]["RankFile"], FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
$columnNames = explode("\t", array_shift($worldBankRankLines));   
foreach ($worldBankRankLines as $worldBankRankLine) { 
    $entry = explode("\t", $worldBankRankLine);
    $entry = array_combine($columnNames, $entry); // turn numeric column indices to column header names  
    if (isset($entry["Country Code [2]"]) && $entry["Country Code [2]"]) {
        $worldBankRank[$entry["Country Code [2]"]] = $entry["Rank"]; 
    }
}
// World Bank country code aliases 
$worldBankAlias = json_decode(file_get_contents("Config/WorldBank/alias.json"), TRUE);
foreach ($worldBankAlias as $source=>$target) {
    if (!isset($worldBankRank[$source])) {      // only alias if we really don't have it
        if ($target===FALSE) {
            $worldBankRank[$source] = FALSE;    // special case - FALSE in alias file means we know we don't have it, so don't want an error message 
        } else {
            $worldBankRank[$source] = $worldBankRank[$target];
        }
    }
} 



$citations = json_decode(file_get_contents("php://stdin"), TRUE);

$outputRecords = Array(); 
// $rowHeadings = Array("MOD-CODE", "LIST-CODE", "CIT-TYPE", "CIT-TAGS", "CIT-TITLE", "CIT-CONTAINER", "CIT-AUTHOR", "SIMILARITY", "SOURCE", "SOURCE-AUTHORS", "SOURCE-COUNTRIES", "CSI");
$rowHeadings = Array("CIT-TYPE", "CIT-TITLE", "CIT-AUTHORS", "CIT-DOI", "WOS-SEARCH", "WOS-TITLE", "WOS-AUTHORS", "WOS-DOI", "WOS-SIMILARITY-MAX", "WOS-AUTHOR-COUNTRIES-DISTINCT", "WOS-FLOAT-COUNTRIES-DISTINCT", "WOS-REPRINT-COUNTRIES-DISTINCT");

foreach ($citations as $citation) {
    
    if (isset($citation["Leganto"]) && $citation["Leganto"]["secondary_type"]["value"]!="NOTE") { 
        // only do any enhancement for entries in the citations file that have an actual list
        // and which are not notes
        
        
        $outputRecord = Array();
        $outputRecord["MOD-CODE"] = $citation["Course"]["modcode"];
        $outputRecord["LIST-CODE"] = $citation["Leganto"]["list_code"];
        $outputRecord["NOTES"] = Array();
        
        if (isset($citation["Leganto"]["secondary_type"])) {
            $outputRecord["CIT-TYPE"] = $citation["Leganto"]["secondary_type"]["desc"];
        }
        $outputRecord["CIT-TAGS"] = Array();
        if (isset($citation["Leganto"]["section_tags"])) {
            foreach ($citation["Leganto"]["section_tags"] as $tag) {
                $outputRecord["CIT-TAGS"][] = $tag["desc"];
            }
        }
        if (isset($citation["Leganto"]["citation_tags"])) {
            foreach ($citation["Leganto"]["citation_tags"] as $tag) {
                $outputRecord["CIT-TAGS"][] = $tag["desc"];
            }
        }
        
        $foundAlmaCitTitle = FALSE;
        if (
            $citation["Leganto"]["secondary_type"]["value"]=="BK" &&
            isset($citation["Alma"]) &&
            isset($citation["Alma"]["titles"]) &&
            count($citation["Alma"]["titles"])
            ) {
                foreach ($citation["Alma"]["titles"] as $almaTitle) {
                    if ($almaTitle["tag"]=="245" && $almaTitle["collated"]) {
                        $outputRecord["CIT-TITLE"] = $almaTitle["collated"];
                        $foundAlmaCitTitle = TRUE;
                        break; // stop at the first one
                    }
                }
            }
            
            if (!$foundAlmaCitTitle) {
                if (isset($citation["Leganto"]["metadata"]["title"])) {
                    $outputRecord["CIT-TITLE"] = $citation["Leganto"]["metadata"]["title"];
                } else if (isset($citation["Leganto"]["metadata"]["journal_title"])) {
                    $outputRecord["CIT-TITLE"] = $citation["Leganto"]["metadata"]["journal_title"];
                }
            }
            
            if (isset($citation["Leganto"]["metadata"]["article_title"])) {
                if (isset($outputRecord["CIT-TITLE"])) { $outputRecord["CIT-CONTAINER"] = $outputRecord["CIT-TITLE"]; }
                $outputRecord["CIT-TITLE"] = $citation["Leganto"]["metadata"]["article_title"];
            } else if (isset($citation["Leganto"]["metadata"]["chapter_title"])) {
                if (isset($outputRecord["CIT-TITLE"])) { $outputRecord["CIT-CONTAINER"] = $outputRecord["CIT-TITLE"]; }
                $outputRecord["CIT-TITLE"] = $citation["Leganto"]["metadata"]["chapter_title"];
            }
            
            if (
                $citation["Leganto"]["secondary_type"]["value"]=="BK" &&
                isset($citation["Alma"]) &&
                isset($citation["Alma"]["creators"]) &&
                count($citation["Alma"]["creators"])
                ) {
                    $outputRecord["CIT-AUTHORS"] = array_map(function($a) { return $a["collated"]; }, $citation["Alma"]["creators"]);
                } else if (isset($citation["Leganto"]["metadata"]["author"])) {
                    $outputRecord["CIT-AUTHORS"] = $citation["Leganto"]["metadata"]["author"];
                }
                
                
                if (isset($citation["Leganto"]["metadata"]["doi"]) && $citation["Leganto"]["metadata"]["doi"]) {
                    $outputRecord["CIT-DOI"] = $citation["Leganto"]["metadata"]["doi"];
                }
                
                $sources = Array();
                
                
                //////////////////////////////
                
                if (isset($citation["WoS"])) {
                    
                    //TODO allow a "force" option to bypass errors
                    if (isset($citation["WoS"]["errors"])) {
                        trigger_error("Error from WoS integration: ".print_r($citation["WoS"]["errors"], TRUE), E_USER_ERROR);
                        exit;
                    }
                    
                    
                    if (isset($citation["WoS"]["first-match"]) && isset($citation["WoS"]["first-match"]["metadata"]) && isset($citation["WoS"]["first-match"]["metadata"]["authors"])) {
                        
                        $outputRecord["DATA"][] = "WOS";
                        $outputRecord["WOS-MATCH"] = "Y";
                        $outputRecord["WOS-AUTHORS"] = Array();
                        $outputRecord["WOS-COUNTRY-CODES"] = Array();
                        $outputRecord["WOS-COUNTRIES"] = Array();
                        $outputRecord["WOS-AUTHOR-COUNTRIES-DISTINCT"] = Array();
                        $outputRecord["WOS-FLOAT-COUNTRIES-DISTINCT"] = Array();
                        $outputRecord["WOS-REPRINT-COUNTRIES-DISTINCT"] = Array();
                        
                        
                        $outputRecord["WOS-SEARCH"] = isset($citation["WoS"]["search-active"]) ? $citation["WoS"]["search-active"] : NULL;
                        
                        
                        $outputRecord["WOS-TITLE"] = $citation["WoS"]["first-match"]["metadata"]["title"];
                        if (isset($citation["WoS"]["first-match"]["metadata"]["identifiers"]) && isset($citation["WoS"]["first-match"]["metadata"]["identifiers"]["doi"]) && count($citation["WoS"]["first-match"]["metadata"]["identifiers"]["doi"])) {
                            $outputRecord["WOS-DOI"] = $citation["WoS"]["first-match"]["metadata"]["identifiers"]["doi"][0];
                        } else if (isset($citation["WoS"]["first-match"]["metadata"]["identifiers"]) && isset($citation["WoS"]["first-match"]["metadata"]["identifiers"]["xref_doi"]) && count($citation["WoS"]["first-match"]["metadata"]["identifiers"]["xref_doi"])) {
                            $outputRecord["WOS-DOI"] = $citation["WoS"]["first-match"]["metadata"]["identifiers"]["xref_doi"][0];
                        } else{
                            $outputRecord["WOS-DOI"] = NULL;
                        }
                        
                        $totalSimilarity = 0;
                        $countSimilarity = 0;
                        $maxSimilarity = FALSE;
                        $minSimilarity = FALSE;
                        
                        
                        $seenAddresses = Array();
                        
                        
                        
                        foreach ($citation["WoS"]["first-match"]["metadata"]["authors"] as $author) {
                            
                            $contemporaryAffiliation = FALSE; // set to TRUE if we find one
                            
                            if (isset($author["similarity-title"]) && isset($author["similarity-author"])) {
                                $thisSimilarity = floor($author["similarity-title"]*$author["similarity-author"]/100);
                                $totalSimilarity += $thisSimilarity;
                                $countSimilarity++;
                                if ($maxSimilarity===FALSE || $thisSimilarity>$maxSimilarity) { $maxSimilarity = $thisSimilarity; }
                                if ($minSimilarity===FALSE || $thisSimilarity<$minSimilarity) { $minSimilarity = $thisSimilarity; }
                            }
                            
                            $outputRecord["WOS-AUTHORS"][] = $author["display_name"];
                            
                            $thisAuthorCountries = Array();
                            
                            if (isset($author["addr_no"]) && $author["addr_no"]) { 
                                $seenAddresses[$author["addr_no"]] = TRUE; 
                            }
                            
                            if (isset($author["addresses"]) && $author["addresses"]) { 
                                
                                foreach ($author["addresses"] as $address) { 
                                    if (isset($address["country"]) && $address["country"]) {
                                        $countryName = $address["country"]; 
                                        if (!isset($namesToCodesMap[strtolower($countryName)])) { 
                                            // try an alias 
                                            if (isset($countryNameAlias[strtolower($countryName)])) { 
                                                $countryName = $countryNameAlias[strtolower($countryName)]; 
                                            }
                                        }
                                        if (isset($namesToCodesMap[strtolower($countryName)])) {
                                            $nationalityCode = $namesToCodesMap[strtolower($countryName)];
                                            $thisAuthorCountries[] = $nationalityCode;
                                            $outputRecord["WOS-AUTHOR-COUNTRIES-DISTINCT"][] = $nationalityCode;
                                            
                                            
                                        } else {
                                            if (TRUE || $config["General"]["Debug"]) {
                                                trigger_error("Can't derive nation code for ".$address["country"], E_USER_NOTICE);
                                            }
                                        }
                                    }
                                }
                            }
                            
                            $outputRecord["WOS-COUNTRY-CODES"][] = array_unique($thisAuthorCountries);
                            $outputRecord["WOS-COUNTRIES"][] = array_map(function($code) use ($namesMap) { return ( isset($namesMap[$code]) && $namesMap[$code] ) ? $namesMap[$code] : $code; }, array_unique($thisAuthorCountries));
                            
                        }
                        
                        
                        // floating addresses 
                        if (isset($citation["WoS"]["first-match"]["metadata"]["addresses"]) && $citation["WoS"]["first-match"]["metadata"]["addresses"]) { 
                            foreach ($citation["WoS"]["first-match"]["metadata"]["addresses"] as $address) {
                                if (!isset($seenAddresses[$address["address_spec"]["addr_no"]]) || !$seenAddresses[$address["address_spec"]["addr_no"]]) {
                                    if (isset($address["address_spec"]["country"]) && $address["address_spec"]["country"]) {
                                        $countryName = $address["address_spec"]["country"];
                                        if (!isset($namesToCodesMap[strtolower($countryName)])) {
                                            // try an alias
                                            if (isset($countryNameAlias[strtolower($countryName)])) {
                                                $countryName = $countryNameAlias[strtolower($countryName)];
                                            }
                                        }
                                        if (isset($namesToCodesMap[strtolower($countryName)])) {
                                            $nationalityCode = $namesToCodesMap[strtolower($countryName)];
                                            $thisAuthorCountries[] = $nationalityCode;
                                            $outputRecord["WOS-FLOAT-COUNTRIES-DISTINCT"][] = $nationalityCode;
                                            
                                            
                                        } else {
                                            if (TRUE || $config["General"]["Debug"]) {
                                                trigger_error("Can't derive nation code for ".$address["country"], E_USER_NOTICE);
                                            }
                                        }
                                    }
                                }
                            }
                            
                        }
                        
                        // reprint addresses 
                        if (isset($citation["WoS"]["first-match"]["metadata"]["reprint_addresses"]) && $citation["WoS"]["first-match"]["metadata"]["reprint_addresses"]) {
                            foreach ($citation["WoS"]["first-match"]["metadata"]["reprint_addresses"] as $address) {
                                    if (isset($address["address_spec"]["country"]) && $address["address_spec"]["country"]) {
                                        
                                        $countryName = $address["address_spec"]["country"];
                                        if (!isset($namesToCodesMap[strtolower($countryName)])) {
                                            // try an alias
                                            if (isset($countryNameAlias[strtolower($countryName)])) {
                                                $countryName = $countryNameAlias[strtolower($countryName)];
                                            }
                                        }
                                        if (isset($namesToCodesMap[strtolower($countryName)])) {
                                            $nationalityCode = $namesToCodesMap[strtolower($countryName)];
                                            $thisAuthorCountries[] = $nationalityCode;
                                            $outputRecord["WOS-REPRINT-COUNTRIES-DISTINCT"][] = $nationalityCode;
                                            
                                            
                                        } else {
                                            if (TRUE || $config["General"]["Debug"]) {
                                                trigger_error("Can't derive nation code for ".$address["country"], E_USER_NOTICE);
                                            }
                                        }
                                    }
                            }
                            
                        }
                        
                        
                        
                        
                        
                        if ($countSimilarity) {
                            
                            $outputRecord["WOS-SIMILARITY-AVG"] = floor($totalSimilarity/$countSimilarity);
                            $outputRecord["WOS-SIMILARITY-MIN"] = $minSimilarity;
                            $outputRecord["WOS-SIMILARITY-MAX"] = $maxSimilarity;
                            
                        }

                        $outputRecord["WOS-AUTHOR-COUNTRIES-DISTINCT"] = array_unique($outputRecord["WOS-AUTHOR-COUNTRIES-DISTINCT"]);
                        sort($outputRecord["WOS-AUTHOR-COUNTRIES-DISTINCT"]); // gives something comparable with other sources
                        $outputRecord["WOS-FLOAT-COUNTRIES-DISTINCT"] = array_unique($outputRecord["WOS-FLOAT-COUNTRIES-DISTINCT"]);
                        sort($outputRecord["WOS-FLOAT-COUNTRIES-DISTINCT"]); // gives something comparable with other sources
                        $outputRecord["WOS-REPRINT-COUNTRIES-DISTINCT"] = array_unique($outputRecord["WOS-REPRINT-COUNTRIES-DISTINCT"]);
                        sort($outputRecord["WOS-REPRINT-COUNTRIES-DISTINCT"]); // gives something comparable with other sources
                        
                        
                    }
                }
                
                
                
                
                
                
                
                $outputRecord["NOTES"] = array_unique($outputRecord["NOTES"]);
                
                $outputRecords[] = $outputRecord;
                
    }
    
}

////////////////////////////////////





if ($outFormat == "CSV") {
    $out = fopen('php://output', 'w');
    fputcsv($out, $rowHeadings);
} else if ($outFormat == "TXT") {
    print implode("\t", $rowHeadings)."\n";
}

foreach ($outputRecords as $outputRecord) {
    $outputRow = Array();
    foreach ($rowHeadings as $rowHeading) {
        $outputField = FALSE;
        if (!isset($outputRecord[$rowHeading])) {
            $outputField = "";
        } else if (is_array($outputRecord[$rowHeading])) {          // for arrays we will delimit with |
            $outputFieldParts = Array();
            foreach ($outputRecord[$rowHeading] as $fieldPart) {
                if (is_array($fieldPart)) {                          // for sub-arrays we will delimit with ,
                    $outputFieldParts[] = implode(";", $fieldPart);
                } else {
                    $outputFieldParts[] = $fieldPart;
                }
            }
            $outputField = implode("|", $outputFieldParts);
        } else {
            $outputField = $outputRecord[$rowHeading];
        }
        $outputRow[] = $outputField;
    }
    if ($outFormat == "CSV") {
        fputcsv($out, $outputRow);
    } else if ($outFormat == "TXT") {
        print implode("\t", $outputRow)."\n";
    }
}

if ($outFormat == "CSV") {
    fclose($out);
} else if ($outFormat == "TXT") {
}




?>